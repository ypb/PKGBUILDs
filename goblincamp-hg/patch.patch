diff -r f59fe45a67c8 Goblin Camp/src/scripting/Engine.cpp
--- a/Goblin Camp/src/scripting/Engine.cpp	Mon Nov 22 00:12:40 2010 +0100
+++ b/Goblin Camp/src/scripting/Engine.cpp	Sat Dec 11 22:10:50 2010 +0100
@@ -61,7 +61,60 @@
 
 namespace Script {
 	const short version = 0;
-	
+
+  bool Prepend_PySysPath() {
+	bool ret = false;
+	Py_ssize_t i, j;
+	PyObject *s_newpath, *l_sys_path, *l_prepend;
+	s_newpath = l_sys_path = l_prepend = NULL;
+	fs::path libDir = (Paths::Get(Paths::GlobalData) / "lib");
+			
+	std::string path = libDir.string();
+
+	l_sys_path = PySys_GetObject("path");
+	if (l_sys_path == NULL) {
+	  return false;
+	}
+	l_prepend = PyList_New(2);
+	if (l_prepend == NULL) {
+	  goto cleanuprepend;
+	}
+	s_newpath = PyString_FromString(const_cast<char*>(path.c_str()));
+	if (s_newpath == NULL) {
+	  goto cleanuprepend;
+	}
+	if (PyList_SetItem(l_prepend, 0, s_newpath) != 0) {
+	  goto cleanuprepend;
+	}
+	//	Py_DECREF(s_newpath);
+	path = (libDir / "stdlib.zip").string();
+	s_newpath = PyString_FromString(const_cast<char*>(path.c_str()));
+	if (s_newpath == NULL) {
+	  goto cleanuprepend;
+	}
+	if (PyList_SetItem(l_prepend, 1, s_newpath) != 0) {
+	  goto cleanuprepend;
+	}
+	// NOW... we probably need to go over l_sys_path, BLECH!
+	j = PyList_Size(l_sys_path);
+	for (i = 0; i < j; i++) {
+	  if (PyList_Append(l_prepend, PyList_GetItem(l_sys_path, i)) != 0) {
+		goto cleanuprepend;
+	  }
+	}
+	// TODO: above's lazy, we can make l_prepend long enough to begin with...
+	if (PySys_SetObject("path", l_prepend) != 0) {
+	  goto cleanuprepend;
+	}
+	Py_DECREF(l_sys_path); // hmmm...
+	ret = true;
+  cleanuprepend:
+	//if (l_sys_path != NULL) Py_DECREF(l_sys_path);
+	if (l_prepend != NULL) Py_DECREF(l_prepend);
+	//if (s_newpath != NULL) Py_DECREF(s_newpath);
+	return ret;
+  }
+
 	void Init(std::vector<std::string>& args) {
 		LOG("Initialising the engine.");
 		
@@ -74,6 +127,7 @@
 		
 		// Don't use default search path.
 		{
+		  if (! Prepend_PySysPath()) {
 		#ifdef WINDOWS
 			char pathsep = ';';
 		#else
@@ -86,6 +140,7 @@
 			path += (libDir / "stdlib.zip").string();
 			
 			PySys_SetPath(const_cast<char*>(path.c_str()));
+		  }
 		}
 		
 		try {
diff -r f59fe45a67c8 build/Jamfile.jam
--- a/build/Jamfile.jam	Mon Nov 22 00:12:40 2010 +0100
+++ b/build/Jamfile.jam	Sat Dec 11 22:10:50 2010 +0100
@@ -285,7 +285,7 @@
 
 rule get-dist-gccore ( properties * ) {
     dir = [ get-dist-dir $(properties) : data ] ;
-    return $(dir)lib/gcamp_core ;
+    return $(dir)/lib/gcamp_core ;
 }
 
 explicit-install dist-additional
diff -r f59fe45a67c8 build/boost-build/goblin-camp/gc-version.jam
--- a/build/boost-build/goblin-camp/gc-version.jam	Mon Nov 22 00:12:40 2010 +0100
+++ b/build/boost-build/goblin-camp/gc-version.jam	Sat Dec 11 22:10:50 2010 +0100
@@ -5,6 +5,7 @@
 import toolset ;
 import os ;
 import modules ;
+import python ;
 
 type.register RC_IN    : rc_in ;
 type.register CPP_IN   : cpp_in ;
@@ -35,7 +36,8 @@
 
 GC_TEMPLATES_DIR = [ modules.peek : GC_TEMPLATES_DIR ] ;
 GC_VERSION       = [ modules.peek : GC_VERSION ] ;
+python-cmd       = [ python.python-command ] ;
 
 actions generate {
-    python "$(GC_TEMPLATES_DIR)/genversion.py" "$(GC_VERSION)" "$(APPEND_HG)" "$(>)" "$(<)"
+    $(python-cmd:G=:E="python") "$(GC_TEMPLATES_DIR)/genversion.py" "$(GC_VERSION)" "$(APPEND_HG)" "$(>)" "$(<)"
 }
diff -r f59fe45a67c8 build/boost-build/goblin-camp/python.jam
--- a/build/boost-build/goblin-camp/python.jam	Mon Nov 22 00:12:40 2010 +0100
+++ b/build/boost-build/goblin-camp/python.jam	Sat Dec 11 22:10:50 2010 +0100
@@ -82,3 +82,7 @@
     ECHO ** Using Python: $(name) ;
     lib python : : <name>$(name) ;
 }
+
+rule python-command ( ) {
+    return [ $(.options).get <python.interpreter> ] ;
+}
